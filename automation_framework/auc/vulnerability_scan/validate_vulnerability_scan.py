from auc.baseusecase import BaseUseCase
from robot.api import logger
from utils.SSHUtils import SSHUtil
import time


class ValidateVulnerabilityScan(BaseUseCase):

    def test_validate_vulnerability_scan(self):
        """
        Description: Trigger vulnerability scan

        Args:
        statuscode: Status code of trigger vulnerability scan
        tenant_id (mandatory): String	tenant  uuid in xstream
        vm_ip (mandatory): String

        :return:
         0 when Success i.e. Scan ID found
         2 when Failure/ Error
         1 when No logging
        """
        self.mw_ip = self.ctx_in['mw_ip']
        self.mw_port = self.ctx_in['mw_port']
        self.mw_user = self.ctx_in['mw_user']
        self.mw_pwd = self.ctx_in['mw_pwd']
        # Wait for logs to appear
        time.sleep(90)
        # Connect to Middleware VM
        self.sshobj = SSHUtil(self.mw_ip, self.mw_user, self.mw_pwd,
                                  timeout=10)
        # Check worker log
        try:
            logger.info("Check worker log ===> ")
            command2 = 'tail -n 250 /var/log/middleware/worker.log'
            result2 = self.sshobj.execute_command(command2)
            logger.info("Worker log status: %s" % result2['status'])
            workerlogs = str(result2['output']).splitlines()
            logger.info("Log Len being checked %s " % len(workerlogs))
            i = len(workerlogs) - 1

            for line in reversed(workerlogs):
                logger.info("Line: %s" % workerlogs[i])
                if str(self.ctx_in['vm_ip']) in workerlogs[i] \
                        and str(self.ctx_in['tenant_id']) in workerlogs[i] \
                        and "triggered" in workerlogs[i]:
                    logger.info("Scan Success : %s " % workerlogs[i])
                    scan_info_split = workerlogs[i].split("is: ")
                    scan_id = scan_info_split[1]
                    logger.info("Scan id :===========> %s" % scan_id)
                    self.ctx_out = True
                    return 0
                elif ("ERROR" in workerlogs[i]) and \
                        str(self.ctx_in['vm_ip']) in workerlogs[i] and \
                        str(self.ctx_in['tenant_id']) in workerlogs[i]:
                    logger.info("Scan Failed : %s " % workerlogs[i])
                    error_info_split = workerlogs[i].split("Error: ")
                    error_msg = error_info_split[1]
                    logger.info("Error Message :===========> %s"
                                % error_msg)
                    self.ctx_out = True
                    return 2
                else:
                    i = i - 1
                    continue
            return 1
        except Exception as e:
            logger.info("Exception occurred while opening worker log. \n "
                        "Exception: %s" % e)
            return 1

    def run_test(self):
        result = self.test_validate_vulnerability_scan()
        logger.info("Status Code = %s" % result)
        return result

    def _finalize_context(self):
        assert self.ctx_out == 0, 'Could not validate vulnerability scan'
