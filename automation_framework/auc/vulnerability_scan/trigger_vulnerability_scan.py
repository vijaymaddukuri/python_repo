from auc.baseusecase import BaseUseCase
from robot.api import logger
from conf.restConstants import *
import requests as req


class TriggerVulnerabilityScanAPI(BaseUseCase):
    def test_trigger_vulnerability_scan_api(self):
        """
        Function to enable the vulnerability for a given VM.
        Args:
        tenant_id (mandatory): String	tenant  uuid in xstream
        vm_ip (mandatory): String
        Returns:
            Function returns Status Code from the REST API response.
            Following status codes can be returned
                200: OK
                404: NOT FOUND
                401: UNAUTHORIZED
                500: INTERNAL SERVER ERROR
        """
        self.mw_ip = self.ctx_in['mw_ip']
        self.mw_port = self.ctx_in['mw_port']
        self.swagger_user = self.ctx_in['swagger_user']
        self.swagger_pwd = self.ctx_in['swagger_pwd']

        # vulnerability_scan scan json data
        logger.info("Triggering vulnerability scan")
        trigger_vulnerability_scan_data = {'TenantID': self.ctx_in['tenant_id']
            , 'VirtualMachineIPAddress': self.ctx_in['vm_ip']}
        credentials = ("%s:%s" % (self.swagger_user,  self.swagger_pwd))\
            .encode('base64').replace('\n', '')
        JSON_HEADER['Authorization'] = 'Basic %s' % credentials
        logger.info("JSON_HEADER : %s" % JSON_HEADER)

        # vulnerability_scan scan API call
        try:
            trigger_vul_scan_resp = req.post(API_TRIGGER_VULNERABILITY_SCAN.
                                             format(self.mw_ip, self.mw_port),
                                          json=trigger_vulnerability_scan_data,
                                          headers=JSON_HEADER)
            logger.info("trigger_vul_scan_resp.status_code: %s" %
                        trigger_vul_scan_resp.status_code)

        # Fetch Scan ID or Error Code from worker log
        except Exception as e:
            logger.info("Exception occurred while calling vulnerability_scan Scan API. \n "
                        "Exception: %s" % e)
            raise Exception("Exception: %s" % e)

        if trigger_vul_scan_resp.status_code != 200:
            message = 'vulnerability_scan Scan is not triggered', \
                      trigger_vul_scan_resp.status_code
            logger.info(message)

        else:
            logger.info('Vulnerability scan triggered. Response code = 200.')

        return trigger_vul_scan_resp.status_code

    def run_test(self):
        result = self.test_trigger_vulnerability_scan_api()
        logger.info("Status Code = %s" % result)
        return result

    def _finalize_context(self):
        assert self.ctx_out == 200, 'Could not trigger vulnerability scan'

