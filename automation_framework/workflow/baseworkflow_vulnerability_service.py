from auc.vulnerability_scan.trigger_vulnerability_scan \
    import TriggerVulnerabilityScanAPI
from auc.vulnerability_scan.validate_vulnerability_scan \
    import ValidateVulnerabilityScan
from utils.GetYamlValue import GetYamlValue
from utils.context import DataContext
from os.path import dirname, abspath
import sys

current_dir = dirname(dirname(abspath(__file__)))
sys.path.append(current_dir)


class BaseWorkflowVulnerabilityService(object):
    """
    In this class we need to define all procedures which will be used
    in robot file vulnerability.robot"""

    def __init__(self, ctx=None):
        """
        Step 1: Create variables for both global and local yaml files
        to store data
        Step 2: Passes the variables names to DataContext proc to assign values

        Args:
        :param ctx:
        """
        self._GC_TAG = 'GC'
        self._WORKFLOW_TAG = 'WORKFLOW'
        if not ctx or not hasattr(ctx, self._GC_TAG):
            self.ctx = DataContext(None, self._GC_TAG)
            self.ctx.update_context(None, self._WORKFLOW_TAG)

        self.wf_context = getattr(self.ctx, self._WORKFLOW_TAG)
        self.gc_context = getattr(self.ctx, self._GC_TAG)
        self.configyaml = GetYamlValue()

    def reset_settings(self):
        """
        Description: At the end of the test, reset the variables to none
        :return: None
        """
        self.wf_context = None
        self.gc_context = None
        self.ctx = None

    def trigger_vulnerability_scan_api(self, tenant_id, vm_ip):
        """
        Description: Triggers vulnerability scan on VM

        :param tenant_id: tenant Id
        :param vm_ip: IP of VM on which scan is to be triggered


        :return: Status code of API call
        """
        self.ctx_in = {'tenant_id': tenant_id,
                       'vm_ip': vm_ip,
                       'mw_ip': self.configyaml.get_config('MW_DETAILS',
                                                           'MW_IP'),
                       'mw_port': self.configyaml.get_config('MW_DETAILS',
                                                            'PORT'),
                       'swagger_user': self.configyaml.get_config('MW_DETAILS',
                                                             'SWAGGER_USER'),
                       'swagger_pwd': self.configyaml.get_config('MW_DETAILS',
                                                            'SWAGGER_PWD')
                       }
        sc = TriggerVulnerabilityScanAPI(
            self.trigger_vulnerability_scan_api.__name__,
            ctx_in=self.ctx_in, ctx_out="").run()
        return sc

    def validate_vulnerability_scan(self, statuscode, tenant_id, vm_ip):
        """
        Description: Validate vulnerability_scan Scan

        :param statuscode: Status code of trigger vulnerability scan
        :param tenant_id: tenant Id
        :param vm_ip: IP of VM on which scan is to be triggered

        :return: Status 0 if scan for VM is triggered and 1 otherwise
        """
        self.ctx_in = {'statuscode': statuscode,
                       'tenant_id': tenant_id,
                       'vm_ip': vm_ip,
                       'mw_ip': self.configyaml.get_config('MW_DETAILS',
                                                           'MW_IP'),
                       'mw_port': self.configyaml.get_config('MW_DETAILS',
                                                             'PORT'),
                       'mw_user': self.configyaml.get_config(
                           'MW_DETAILS',
                           'MW_USER'),
                       'mw_pwd': self.configyaml.get_config(
                           'MW_DETAILS',
                           'MW_PWD')
                       }

        sc = ValidateVulnerabilityScan(
            self.validate_vulnerability_scan.__name__,
            ctx_in=self.ctx_in, ctx_out="").run()
        return sc
